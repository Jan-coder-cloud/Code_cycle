use deno_core::{
    error::AnyError,
    resolve_path,
    JsRuntime,
    PollEventLoopOptions,
    RuntimeOptions,
    op,
    OpState,
};
use std::env;
use std::rc::Rc;
use tokio;

// Define custom logging operations.
#[op]
fn op_console_debug(state: &mut OpState, msg: String) -> Result<(), AnyError> {
    if env::var("DEBUG").is_ok() {
        println!("[DEBUG] {}: {}", chrono::Utc::now().to_rfc3339(), msg);
    }
    Ok(())
}

#[op]
fn op_console_warn(state: &mut OpState, msg: String) -> Result<(), AnyError> {
    println!("\x1b[33m[WARN] {}: {}\x1b[0m", chrono::Utc::now().to_rfc3339(), msg);
    Ok(())
}

#[op]
fn op_console_error(state: &mut OpState, msg: String) -> Result<(), AnyError> {
    println!("\x1b[31m[ERROR] {}: {}\x1b[0m", chrono::Utc::now().to_rfc3339(), msg);
    Ok(())
}

async fn run_js(file_path: &str) -> Result<(), AnyError> {
    let main_module = resolve_path(file_path, env::current_dir()?.as_path())?;

    let mut js_runtime = JsRuntime::new(RuntimeOptions {
        module_loader: Some(Rc::new(FsModuleLoader)),
        ops: vec![
            op_console_debug::decl(),
            op_console_warn::decl(),
            op_console_error::decl(),
        ],
        ..Default::default()
    });

    let mod_id = js_runtime.load_main_es_module(&main_module).await?;
    let result = js_runtime.mod_evaluate(mod_id);

    js_runtime
        .run_event_loop(PollEventLoopOptions {
            wait_for_inspector: false,
            pump_v8_message_loop: false,
        })
        .await?;
    result.await
}

#[tokio::main]
async fn main() {
    if let Err(error) = run_js("./example.js").await {
        eprintln!("error: {:?}", error);
    }
}
